{"name":"ImBundle","body":"# Snowcap IM Bundle\r\n\r\n# Introduction\r\n\r\nImagemagick wrapper for Symfony2.   \r\nIt's a general wrapper to access imagemagick command line functions, instead of using bindings like iMagick, which doesn't cover all the imagemagick functionalities.\r\n\r\nIt allows you to use all the convert/mogrify power, from your controller or your views\r\n\r\n## Usage\r\n\r\n### Twig Tag\r\n\r\n<pre>\r\n{% imresize %}\r\n  &lt;p>some content&lt;/p>\r\n  &lt;img src=\"/some/path\" width=\"100\" />\r\n  &lt;img src=\"{{ asset('/some/path') }}\" width=\"100\" />\r\n{% endimresize %}  \r\n</pre>\r\n\r\nThis will parse all content inside the tag and render image caches regarding their HTML width and/or height attributes\r\n\r\n### Twig function\r\n\r\n<pre>\r\n  &lt;img src=\"{{ imresize('/some/path','small') }}\"/>\r\n  &lt;img src=\"{{ imresize('/some/path','120x') }}\"/>\r\n  &lt;img src=\"{{ imresize('/some/path','x120') }}\"/>\r\n  &lt;img src=\"{{ imresize('/some/path','120x120') }}\"/>\r\n</pre>\r\nThe format - the second argument - can be a predefined format in your configuration, or a [width]x[height] syntax\r\n\r\n### Twig filter\r\n\r\n<pre>\r\n  &lt;img src=\"{{ '/some/path' | imresize('small') }}\"/>\r\n  &lt;img src=\"{{ asset('/some/path') | imresize('small') }}\"/>\r\n</pre>\r\n\r\n### From a controller\r\n\r\n<pre>\r\n$im = $this->get(\"snowcap_im.manager\");\r\n\r\n// to create a cached file\r\n$im->convert($format, $path);\r\n\r\n// to resize the source file\r\n$im->mogrify($format, $path);\r\n</pre>\r\n\r\n### In entities\r\n\r\nIf you need to alter an uploaded image, you can add annotations on the file public property from your entity\r\n\r\n<pre>\r\n// ...\r\nuse Snowcap\\ImBundle\\Doctrine\\Mapping as SnowcapIm;\r\n// ...\r\n\r\n    /**\r\n     *\r\n     * @Assert\\File(maxSize=\"6000000\")\r\n     * @SnowcapIm\\Mogrify(params={\"thumbnail\"=\"100x100>\"})\r\n     */\r\n    public $file;\r\n</pre>\r\n\r\nWhen the form is submitted, the file will then be \"thumbnailed\" to 100x100 if bigger. You can then use the $file->move() method like usual.\r\n\r\nThe <code>params</code> attribute can contain\r\n\r\n* an array of ImageMagick key/values (like the example above)\r\n* a format predefined in config\r\n\r\n## Installation\r\n\r\n### Requirements\r\n\r\n* You need to have the ImageMagick binaries available (convert & mogrify)\r\n* You need to have a cache folder in your web dir, writeable by the webserver\r\n\r\n### Clone the repo\r\n\r\nput the following in your <code>deps</code> file\r\n<pre>\r\n[SnowcapImBundle]\r\n    git=https://github.com/snowcap/SnowcapImBundle.git\r\n    target=/bundles/Snowcap/ImBundle\r\n</pre>\r\n\r\n### Activate the bundle\r\n\r\n<code>app/autoload.php</code>\r\n<pre>\r\n    'Snowcap'          => __DIR__.'/../vendor/bundles',\r\n</pre>\r\n\r\n<code>app/AppKernel.php</code>\r\n<pre>\r\nnew Snowcap\\ImBundle\\SnowcapImBundle(),\r\n</pre>\r\n\r\n<code>app/config/routing.yml</code>\r\n<pre>\r\nsnowcap_im:\r\n  resource: \"@SnowcapImBundle/Resources/config/routing.yml\"\r\n</pre>\r\n\r\n## Configuration\r\n\r\n<code>app/config.yml</code>\r\n<pre>\r\nsnowcap_im:\r\n    # optional, the directory where your imagemagick binaries are. Default: /usr/bin/\r\n    binary_path: '/opt/local/bin/'\r\n\r\n    # optional too, a list of pre-defined conversions\r\n    formats:\r\n        # resizes to 50 width, at 80% quality\r\n        small:\r\n            resize: 50x\r\n            quality: 80\r\n\r\n        # resizes to fit in 100x100, only if bigger, and remove all crap (meta-data, ...)    \r\n        medium:\r\n            thumbnail: 100x100>\r\n            \r\n        # crop to get exactly 100x100, keeping the maximum area possible, centered\r\n        square:\r\n            resize: 100x100^\r\n            gravity: center\r\n            crop: 100x100+0+0\r\n</pre>\r\n\r\n## Clearing the cache\r\n\r\nYou can clear the cache with the following command-line task\r\n\r\n<pre>\r\n./app/console snowcap:im:clear [age]\r\n</pre>\r\nWhere the age argument - optionnal - will only clear cache older than the argument\r\n\r\n","tagline":"Imagemagick wrapper for Symfony2","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}